---
interface Props {
    name: string;
    tags: string[];
}

const { name, tags } = Astro.props;

const uniques = [...new Set(tags)].map((item) => {
    return {
        name: item,
        counter: tags.filter((tag) => tag.includes(item)).length,
    };
});
---

<div class="tags flex flex-wrap gap-2" data-name={name}>
    {
        uniques.map((item) => (
            <button class="tag btn" data-name={item.name}>
                {item.name}
                <div class="badge badge-sm badge-primary">{item.counter}</div>
            </button>
        ))
    }
</div>

<style></style>

<script>
    import { $tags, add, remove } from "../../stores/tags";

    $tags.subscribe(($tags) => {
        Object.keys($tags).forEach((name) => {
            document
                .querySelectorAll(`.tags[data-name="${name}"] .tag`)
                .forEach((tag) => {
                    const tagName = tag.getAttribute("data-name");

                    if (tagName) {
                        $tags[name].includes(tagName)
                            ? tag.classList.add("btn-active")
                            : tag.classList.remove("btn-active");
                    }
                });
        });
    });

    document.querySelectorAll(".tags").forEach((tags) => {
        const tagsName = tags.getAttribute("data-name");

        if (null === tagsName) {
            return;
        }
        tags.querySelectorAll(".tag").forEach((tag) => {
            const tagName = tag.getAttribute("data-name");
            if (tagName) {
                tag.addEventListener("click", () => {
                    if (tag.classList.contains("btn-active")) {
                        remove(tagsName, tagName);
                        tag.classList.remove("btn-active");
                    } else {
                        add(tagsName, tagName);
                        tag.classList.add("btn-active");
                    }
                });
            }
        });
    });
</script>
